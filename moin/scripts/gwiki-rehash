#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    gwiki-rehash
     - Saves graph data from all the pages of a wiki.

    @copyright: 2006 by Juhani Eronen <exec@iki.fi>
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

"""

import os
import sys
from codecs import getencoder

from MoinMoin.wikiutil import quoteWikinameFS, unquoteWikiname, importPlugin
from MoinMoin import request
from MoinMoin.Page import Page
from MoinMoin import config

# Encoder from unicode to charset selected in config
encoder = getencoder(config.charset)
def _e(str):
    return encoder(str, 'replace')[0]

pages = []

class UserInputException(Exception):
    pass

try:
    wikipath = sys.argv[1]
    configdir = os.path.join(wikipath, 'config')
    sys.path.insert(0, configdir)
    from wikiconfig import Config
    datadir = Config.data_dir
    pagesdir = os.path.join(datadir, 'pages')
    if len(sys.argv) > 2:
        pagename = unicode(sys.argv[2], sys.getfilesystemencoding())
        pagefilename = quoteWikinameFS(pagename)
        pagedir = os.path.join(pagesdir, pagefilename)
        if not os.path.isdir(pagedir):
            raise UserInputException
        pages = [pagename]
except UserInputException:
    sys.stderr.write("Usage: " + sys.argv[0] + " <path-to-wiki> [pagename]\n")
    sys.exit(2)

if not pages:
    for file in os.listdir(datadir):
        if file.startswith('graphdata.shelve'):
            sys.stderr.write('Removed graphdata (%s)\n' % file)
            os.unlink(os.path.join(datadir, file))
else:
    for file in os.listdir(datadir):
        if file.startswith('read_lock') or file.startswith('write_lock'):
            sys.stderr.write("Found lockfile (%s), \n" % lockfile + \
                             "database may be corrupted. \n" + \
                             "Rehash entire db or remove lock " + \
                             "and rehash the crashed pages.\n")
            sys.exit(1)

os.chdir(pagesdir)

if not pages:
    # List existing pages
    for dir in [x for x in os.listdir('.') if os.path.isdir(x)]:
        if 'current' in os.listdir(dir):
            pages.append(unquoteWikiname(dir))

for pagename in pages:
    if pagename.endswith('/MoinEditorBackup'):
        continue
    print "Rehashing " + _e(pagename)
    page_enc = _e(pagename)
    # Make a new request for the page, get raw text
    req = request.RequestCLI(pagename=page_enc)
    p = Page(req, pagename)
    pagedir = p.getPagePath()
    if "underlay/pages" in pagedir:
        import re
        pagedir = re.sub(r'underlay/pages', 'data/pages', pagedir, 1)
        if not os.path.exists(pagedir):
            os.makedirs(pagedir)
    text = p.get_raw_body()
    
    # Apply the graphsaver-action to the page
    graphsaver = importPlugin(req.cfg, 'action', 'savegraphdata')
    graphsaver(pagename, req, text, pagedir, p)

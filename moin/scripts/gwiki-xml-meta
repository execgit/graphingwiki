#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-
"""
    gwiki-xml-meta
     - Edits or lists metadata on pages

    @copyright: 2007 by Juhani Eronen <exec@iki.fi> and Joachim Viide
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import sys
import getpass
import csv
import urllib

from optparse import OptionParser

from MoinMoin import config

from graphingwiki.patterns import qstrip_p, encode
from graphingwiki.editing import xmlrpc_error, xmlrpc_conninit, xmlrpc_connect

usage = "usage: %prog [options] wikiurl"
parser = OptionParser(usage=usage)

parser.add_option("-g", "--get", dest="get_args", action='append', default=[],
                  help="Get metadata from page or page regexp")
parser.add_option("-k", "--key", dest="key_args", action='append',
                  help="Get only specified keys")
parser.add_option("-m", "--match", dest="match_args", action='append',
                  help="Get only pages that match arguments")
parser.add_option("-K", "--keys_only", action="store_true", dest="keysonly",
                  default=False, help="Get only metadata keys, not values")
parser.add_option("-a", "--append", dest="app_args",
                  help="Append metadata to page")
parser.add_option("-r", "--replace", dest="repl_args",
                  help="Replace metadata on page")
parser.add_option("-s", "--set", dest="set_args", action='append',
                  help="The metadata to be appended or replaced")

options, args = parser.parse_args()

if len(args) != 1:
    sys.stderr.write("Bad Args\n")
    parser.print_help()
    sys.exit(1)

wiki = args[0]

username = raw_input("Username:")
password = getpass.getpass("Password:")

class ArgError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)  

if options.repl_args or options.app_args:
    if options.app_args:
        page = unicode(options.app_args, config.charset)
        method = 'add'
    else:
        page = unicode(options.repl_args, config.charset)
        method = 'repl'
        
    input = {}
    try:
        if not options.set_args:
            raise ArgError("No metadata to set\n")
        for arg in options.set_args:
            data = arg.split('=')
            if len(data) != 2:
                raise ArgError("Bad set args: %s\n" % data)
            key, val = [unicode(x, config.charset) for x in data]
            input.setdefault(page + "!" + key, []).append(val)
        if not input:
            raise ArgError("No metadata to set\n")
    except ArgError, e:
        sys.stderr.write(e.value)
        parser.print_help()
        sys.exit(1)

    srcWiki, _ = xmlrpc_conninit(wiki, username, password)

    result = xmlrpc_connect(srcWiki.SetMeta, wiki, page, input, method)

    if isinstance(result, basestring):
        print result
        sys.exit(0)
else:
    srcWiki, _ = xmlrpc_conninit(wiki, username, password)
    val = ",".join(options.get_args)
    if options.key_args:
        val += ',||' + '||'.join(options.key_args) + '||'
    if options.match_args:
        val += ',' + ','.join(options.match_args)
        
    result = xmlrpc_connect(srcWiki.GetMeta, wiki, val, options.keysonly)
    wr = csv.writer(sys.stdout)
    if isinstance(result, list):
        if options.keysonly:
            wr.writerow(['Keys'] + [urllib.unquote(x) for x in result[0]])
            wr.writerow(['Pages'] + [urllib.unquote(x) for x in result[1]])
        else:
            for row in result:
                wr.writerow([urllib.unquote(encode(row[0]))] +
                             [urllib.unquote(encode(','.join(x)))
                              for x in row[1:]])

        sys.exit(0)

# Us being here means that an error has occurred
errno, err = xmlrpc_error(result)
sys.stderr.write("Error %s: %s\n" % (errno, err))
sys.exit(1)

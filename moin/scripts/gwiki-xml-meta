#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    gwiki-xml-meta
     - Edits or lists metadata on pages

    @copyright: 2007 by Juhani Eronen <exec@iki.fi> and Joachim Viide
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import sys, os
sys.path.append(os.path.join(os.path.split(os.path.abspath(__file__))[0], '..', 'lib', 'python%d.%d' % sys.version_info[:2], 'site-packages'))

import re
import csv
import urllib

from optparse import OptionParser

from MoinMoin import config

from graphingwiki.patterns import encode
from graphingwiki.editing import xmlrpc_error, xmlrpc_conninit, \
     xmlrpc_connect, getmeta_to_table, getuserpass

def handle_error(result):
    # Us being here means that an error has occurred
    errno, err = xmlrpc_error(result)
    sys.stderr.write("Error %s: %s\n" % (errno, err))
    sys.exit(1)

usage = "usage: %prog [options] wikiurl"
parser = OptionParser(usage=usage)

parser.add_option("-g", "--get", dest="get_args", action='append', default=[],
                  help="Get from Wiki with a string of MetaTable arguments")
parser.add_option("-K", "--keys_only", action="store_true", dest="keysonly",
                  default=False, help="Get only metadata keys, not values")

parser.add_option("-a", "--append", dest="app_page",
                  help="Append metadata to page")
parser.add_option("-r", "--replace", dest="repl_page",
                  help="Replace metadata on page")
parser.add_option("-s", "--set", dest="set_args", action='append',
                  help="The metadata to be appended or replaced")

parser.add_option("-A", "--batch_append", dest="app_file",
                  help="Append metadata based on a semicolon-delimited CSV file in a batch fashion. First row states the keys, first colums states the pages")
parser.add_option("-R", "--batch_replace", dest="repl_file",
                  help="Replace metadata based on a semicolon-delimited CSV file in a batch fashion. First row states the keys, first colums states the pages")

parser.add_option("-c", "--category_append", dest="cat_add", action='append',
                  help="Append catlist to page")
parser.add_option("-x", "--category_replace", dest="cat_repl", action='append',
                  help="Replace catlist on page (use empty category string to delete)")

parser.add_option("-t", "--template", dest="template", 
                  help="Use page template")
parser.add_option("-u", "--username", dest="username", 
                  help="Username for logging onto the wiki")

options, args = parser.parse_args()

if len(args) != 1:
    sys.stderr.write("Bad Args\n")
    parser.print_help()
    sys.exit(1)

wiki = args[0]

username = ''
if options.username:
    username = options.username

username, password = getuserpass(username)

class ArgError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)  

catlist = list()

category_edit = str()
if options.cat_add:
    catlist = [unicode(x) for x in options.cat_add
                  if x.strip()]
    category_edit = 'add'
elif options.cat_repl:
    catlist = [unicode(x) for x in options.cat_repl
                  if x.strip()]
    if catlist:
        category_edit = 'set'
    else:
        category_edit = 'del'

template = str()
if options.template:
    template = options.template

if options.app_file or options.repl_file:
    if options.app_file:
        method = 'add'
        fname = options.app_file
    else:
        method = 'repl'
        fname = options.repl_file

    reader = csv.reader(open(fname, "rb"), delimiter=';')

    # Keys from first row, ignore the key for first column
    keys = reader.next()[1:]

    srcWiki, _ = xmlrpc_conninit(wiki, username, password)

    # Data in next rows
    for row in reader:
        input = {}

        # First column == page name
        page = unicode(row[0], config.charset)
        # replace spaces with underscores
        page = re.sub('\s+', '_', page)

        # enumerate values, ignore first column
        for i, val in enumerate(row[1:]):
            input.setdefault(keys[i], set([])).add(val)

        for i in input:
            # Discard extra empties
            if len(input) > 1:
                input[i].discard('')
            input[i] = list(input[i])

        result = xmlrpc_connect(srcWiki.SetMeta, wiki, page,
                                input, method, True,
                                category_edit, catlist,
                                template)

        if isinstance(result, list):
            print '\n'.join(result)
        else:
            handle_error(result)

    sys.exit(0)

if options.repl_page or options.app_page:
    if options.app_page:
        page = unicode(options.app_page, config.charset)
        method = 'add'
    else:
        page = unicode(options.repl_page, config.charset)
        method = 'repl'

    input = {}
    if options.set_args:
        for arg in options.set_args:
            data = arg.split('=')
            if len(data) != 2:
                raise ArgError("Bad set args: %s\n" % data)
            key, val = [unicode(x, config.charset) for x in data]
            input.setdefault(key, []).append(val)

    srcWiki, _ = xmlrpc_conninit(wiki, username, password)

    result = xmlrpc_connect(srcWiki.SetMeta, wiki, page,
                            input, method, True,
                            category_edit, catlist,
                            template)

    if isinstance(result, list):
        print '\n'.join(result)
        sys.exit(0)
else:
    srcWiki, _ = xmlrpc_conninit(wiki, username, password)
    val = ",".join(options.get_args)
        
    result = xmlrpc_connect(srcWiki.GetMeta, wiki, val, options.keysonly)

    wr = csv.writer(sys.stdout, delimiter=';')
    if isinstance(result, list):
        if options.keysonly:
            wr.writerow(['Keys'] + [urllib.unquote(x) for x in result[0]])
            wr.writerow(['Pages'] + [urllib.unquote(x) for x in result[1]])
        else:
            result = getmeta_to_table(result)
            for row in result:
                wr.writerow(row)

        sys.exit(0)

handle_error(result)

    user_form_fields = [
            ('name', 'Id', "text", "36", "(Studentnumber)"),
            ('aliasname', 'Name', "text", "36", ''),
            ('password', 'Password', "password", "36", ''),
            ('password2', 'Password repeat', "password", "36", '(Only for password change or new account)'),
            ('email', 'Email', "text", "36", ''),
            ('css_url', 'User CSS URL', "text", "40", '(Leave it empty for disabling user CSS)'),
            ('edit_rows', 'Editor size', "text", "3", ''),
            ]

    from graphingwiki.securitypolicy import SecurityPolicy as GraphingWiki
    class SecurityPolicy(GraphingWiki):
        def read(self, page_name):
            category_blocklist = [u'CategoryStatus',
                                  u'CategoryCourse',
                                  u'CategoryCoursepoint',
                                  u'CategoryTask',
                                  u'CategoryTaskpoint',
                                  u'CategoryHistory',
                                  u'CategoryQuestion',
                                  u'CategoryAnswer',
                                  u'CategoryTip',
                                  u'CategoryTimetrack',
                                  u'CategoryUser',
                                  u'CategoryAdmin',
                                  u'CategoryTeacher']
            if self.request.user.name:
                from raippa import RaippaUser
                from graphingwiki.patterns import getgraphdata
                from graphingwiki.editing import getmetas
                from graphingwiki.patterns import getgraphdata
                from graphingwiki.patterns import encode
                if not hasattr(self.request, 'graphdata'):
                    getgraphdata(self.request)
                raippauser = RaippaUser(self.request, self.request.user.name)
                if "CategoryAdmin" in raippauser.categories or \
                   "CategoryTeacher" in raippauser.categories:
                   return True
                else:
                    allowlist = [u'RAIPPA',
                                 u'UserPreferences',
                                 raippauser.currentcourse,
                                 raippauser.currenttask]

                    if page_name in allowlist:
                        return True
                    else:
                        meta = getmetas(self.request, self.request.graphdata, encode(page_name), ["WikiCategory"], checkAccess=False)
                        for category, type in meta["WikiCategory"]:
                            if category in category_blocklist:
                                return False
                        return True
            else:
                from graphingwiki.patterns import getgraphdata
                from graphingwiki.editing import getmetas
                from graphingwiki.patterns import getgraphdata
                from graphingwiki.patterns import encode
                if not hasattr(self.request, 'graphdata'):
                    getgraphdata(self.request)
                if page_name == "UserPreferences" or page_name == "RAIPPA":
                    return True
                else:
                    meta = getmetas(self.request, self.request.graphdata, encode(page_name), ["WikiCategory"], checkAccess=False)
                    for category, type in meta["WikiCategory"]:
                        if category in category_blocklist:
                            return False
                    return True

        def write(self, page_name):
            if self.request.user.name:
                from raippa import RaippaUser
                from graphingwiki.patterns import getgraphdata
                if not hasattr(self.request, 'graphdata'):
                    getgraphdata(self.request)
                raippauser = RaippaUser(self.request, self.request.user.name)
                if "CategoryAdmin" in raippauser.categories or \
                   "CategoryTeacher" in raippauser.categories:
                    return True
                else:
                    if page_name == raippauser.statuspage \
                      or page_name == raippauser.id \
                      or page_name.startswith("History/") \
                      or page_name.startswith("TimeTrack/") \
                      or page_name == "UserPreferences":
                        return True
                    else:
                        return False
            else:
                return False

        def save(self, editor, newtext, rev, **kw):
            from graphingwiki.securitypolicy import SecurityPolicy as GraphingWiki
            if GraphingWiki.save(self, editor, newtext, rev, **kw):
                return True
            else:
                return False


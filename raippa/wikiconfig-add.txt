    # Raippa specific configuration
    html_head+='<script type="text/javascript" src="%s/raippajs/raippa-common.js"></script>' \
               % url_prefix_static

    superuser = [u"admin"]
    acl_rights_before = u"admin,TeacherGroup:read,write,delete,revert,admin"
    acl_hierarchic = True
                    
    raippa_config = 'Configuration'

    theme_default = 'raippa'
    theme_force = True
                
    user_form_fields = [
            ('name', 'Student number', "text", "36", ""),
            ('aliasname', 'Name', "text", "36", ''), 
            ('password', 'Password', "password", "36", ''),
            ('password2', 'Password repeat', "password", "36", '(Only for password change or new account)'),              
            ('email', 'Email', "text", "36", ''),
            ('css_url', 'User CSS URL', "text", "40", '(Leave it empty for disabling user CSS)'),
            ('edit_rows', 'Editor size', "text", "3", ''),
            ]           

    user_form_disable = ['name']
    
    from MoinMoin.security import Permissions

    class SecurityPolicy(Permissions):

        def read(self, pagename):
            if self.request.user.name in self.request.cfg.superuser:
                return Permissions.__getattr__(self, 'read')(pagename)
    
            from raippa.user import User
            from graphingwiki.editing import get_metas
            from raippa import raippacategories as rc

            user = User(self.request, self.request.user.name)
            teacher = user.is_teacher()

            metas = get_metas(self.request, pagename, ['gwikicategory'], checkAccess=False)
            page_categories = metas.get('gwikicategory', list())

            from raippa import forbidden
            for category in page_categories:
                if category in forbidden:
                    return False

            if not teacher:
                parent = "/".join(pagename.split("/")[:-1])
                if parent == user.name and rc['timetrack'] in page_categories:
                    return True

                metas = get_metas(self.request, parent, ['gwikicategory'], checkAccess=False)
                if rc['student'] in metas.get('gwikicategory', list()):
                    return False

            from raippa.pages import Task
            from raippa.pages import Question

            for category in page_categories:
                if category == rc['student'] and not teacher and pagename != user.name:
                    return False
                elif category == rc['task']:
                    if teacher:
                        return True
                    elif user.is_student():
                        may, reason = user.can_do(Task(self.request, pagename))
                        return may
                    else:
                        return False
                elif category == rc['question']: 
                    if teacher:
                        return True
                    elif user.is_student():
                        may, reason = user.can_do(Question(self.request, pagename))
                        return may
                    else:
                        return False
    
            return Permissions.__getattr__(self, 'read')(pagename)


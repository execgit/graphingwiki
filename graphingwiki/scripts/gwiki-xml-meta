#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
    gwiki-xml-meta
     - Edits or lists metadata on pages

    @copyright: 2007 by Juhani Eronen <exec@iki.fi> and Joachim Viide
    @license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import sys
import os

import re
import csv
import urllib

from optparse import OptionParser

from MoinMoin import config

from graphingwiki.util import encode_page
from graphingwiki.editing import xmlrpc_error, xmlrpc_conninit, \
     xmlrpc_connect, getmeta_to_table, getuserpass, WikiRpcException

def handle_error(result):
    # Us being here means that an error has occurred
    errno, err = xmlrpc_error(result)
    sys.stderr.write("Error %s: %s\n" % (errno, err))
    sys.exit(1)

usage = "usage: %prog [options] wikiurl"
parser = OptionParser(usage=usage)

parser.add_option("-g", "--get", dest="get_args", action='append', default=[],
                  help="Get metadata from Wiki with a  MetaTable argument string")
parser.add_option("-K", "--keys_only", action="store_true", dest="keysonly",
                  default=False, help="Get only metadata keys, not values")

parser.add_option("-a", "--append", dest="app_page",
                  help="Append metadata to page")
parser.add_option("-r", "--replace", dest="repl_page",
                  help="Replace metadata on page")
parser.add_option("-s", "--set", dest="set_args", action='append',
                  help="The metadata to be appended or replaced")

parser.add_option("-A", "--batch_append", dest="app_file",
                  help="Append metadata based on a semicolon-delimited CSV file in a batch fashion. First row states the keys, first colums states the pages")
parser.add_option("-R", "--batch_replace", dest="repl_file",
                  help="Replace metadata based on a semicolon-delimited CSV file in a batch fashion. First row states the keys, first colums states the pages")

parser.add_option("-u", "--category_append", dest="cat_add", action='append',
                  help="Append catlist to page")
parser.add_option("-x", "--category_replace", dest="cat_repl", action='append',
                  help="Replace catlist on page (use empty category string to delete)")

parser.add_option("-t", "--template", dest="template", 
                  help="Use page template")
parser.add_option("-U", "--username", dest="username", 
                  help="Username for logging onto the wiki")
parser.add_option("-p", "--password", dest="password", 
                  help="Wiki password")

options, args = parser.parse_args()

if len(args) != 1:
    sys.stderr.write("Bad Args\n")
    parser.print_help()
    sys.exit(1)

wiki = args[0]

username = ''
if options.username:
    username = options.username
else:
    username = ''
if options.password:
    password = options.password
else:
    password = ''

if not options.username or not options.password:
    username, password = getuserpass(username)

class ArgError(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return repr(self.value)  

catlist = list()

category_edit = 'add'
if options.cat_add:
    catlist = [unicode(x) for x in options.cat_add
                  if x.strip()]
    category_edit = 'add'
elif options.cat_repl:
    catlist = [unicode(x) for x in options.cat_repl
                  if x.strip()]
    if catlist:
        category_edit = 'set'
    else:
        category_edit = 'del'

template = str()
if options.template:
    template = options.template

try:
    if options.app_file or options.repl_file:
        if options.app_file:
            method = 'add'
            fname = options.app_file
        else:
            method = 'set'
            fname = options.repl_file

        reader = csv.reader(open(fname, "rb"), delimiter=';')

        # Keys from first row, ignore the key for first column
        keys = [x.strip() for x in reader.next()[1:]]

        srcWiki, _ = xmlrpc_conninit(wiki, username, password)

        pages = list()

        # Data in next rows
        for row in reader:
            if not row:
                continue

            input = dict()

            # First column == page name
            page = unicode(row[0], config.charset)

            pages.append(page)

            # enumerate values, ignore first column
            for i, val in enumerate(row[1:]):
                input.setdefault(keys[i], list()).append(val)

            xmlrpc_connect(srcWiki.SetMeta, wiki, page,
                           input, method, True,
                           category_edit, catlist,
                           template)

            sys.stdout.write('.')
            sys.stdout.flush()

        resultset = list()

        for res in srcWiki():
            resultset.append(res)

        print
        if isinstance(resultset[0], basestring):
            print resultset[0]
            resultset = resultset[1:]
        
        for page, results in zip(pages, resultset):
            for result in results:
                print page, result

    elif options.repl_page or options.app_page:
        if options.app_page:
            page = unicode(options.app_page, config.charset)
            method = 'add'
        else:
            page = unicode(options.repl_page, config.charset)
            method = 'set'

        input = dict()
        if options.set_args:
            for arg in options.set_args:
                data = arg.split('=')
                if len(data) != 2:
                    raise ArgError("Bad set args: %s\n" % data)
                key, val = [unicode(x, config.charset) for x in data]
                input.setdefault(key, list()).append(val)

        srcWiki, _ = xmlrpc_conninit(wiki, username, password)

        xmlrpc_connect(srcWiki.SetMeta, wiki, page,
                       input, method, True, category_edit,
                       catlist, template)

        for res in srcWiki():
            print res

    else:
        srcWiki, _ = xmlrpc_conninit(wiki, username, password)

        val = ",".join(options.get_args)

        xmlrpc_connect(srcWiki.GetMeta, wiki, val, options.keysonly)

        wr = csv.writer(sys.stdout, delimiter=';')

        # The first item may be 'SUCCESS', skip that
        results = srcWiki()
        if results[0] == 'SUCCESS':
            results = results[1:]

        for res in results:
            if options.keysonly:
                wr.writerow(['Keys'] + [encode_page(x) for x in res[0]])
                wr.writerow(['Pages'] + [encode_page(x) for x in res[1]])
            else:
                result = getmeta_to_table(res)
                for row in result:
                    wr.writerow([encode_page(x) for x in row])

except WikiRpcException, err:
    handle_error(err)

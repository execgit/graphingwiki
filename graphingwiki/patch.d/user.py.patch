--- ./MoinMoin/user.py.orig	2014-05-21 08:46:42.001676112 +0300
+++ ./MoinMoin/user.py	2014-05-21 08:47:20.089864985 +0300
@@ -22,6 +22,10 @@
 
 import os, time, codecs, base64
 import md5crypt
+import tempfile
+import errno
+import error
+import stat
 
 try:
     import crypt
@@ -35,9 +39,11 @@ from MoinMoin.support.python_compatibili
 
 from MoinMoin import config, caching, wikiutil, i18n, events
 from werkzeug.security import safe_str_cmp as safe_str_equal
-from MoinMoin.util import timefuncs, random_string
+from MoinMoin.util import timefuncs, random_string, filesys
 from MoinMoin.wikiutil import url_quote_plus
 
+class SaveError(error.Error):
+    pass
 
 def getUserList(request):
     """ Get a list of all (numerical) user IDs.
@@ -176,6 +182,10 @@ def encodePassword(cfg, pwd, salt=None,
         hash = hash_new('sha1', pwd)
         hash.update(salt)
         return '{SSHA}' + base64.encodestring(hash.digest() + salt).rstrip()
+    elif scheme == '{SHA}':
+        pwd = pwd.encode('utf-8')
+        hash = hash_new('sha1', pwd)
+        return '{SHA}' + base64.encodestring(hash.digest()).rstrip()
     else:
         # should never happen as we check the value of cfg.password_scheme
         raise NotImplementedError
@@ -384,7 +394,7 @@ class User:
         self.subscribed_pages = self._cfg.subscribed_pages_default
         self.email_subscribed_events = self._cfg.email_subscribed_events_default
         self.jabber_subscribed_events = self._cfg.jabber_subscribed_events_default
-        self.theme_name = self._cfg.theme_default
+        self.theme_name = '<default>'
         self.editor_default = self._cfg.editor_default
         self.editor_ui = self._cfg.editor_ui
         self.last_saved = str(time.time())
@@ -450,6 +460,10 @@ class User:
         """
         return os.path.join(self._cfg.user_dir, self.id or "...NONE...")
 
+    # Support for administrative scripts and tasks
+    def getFilename(self):
+        return self.__filename()
+
     def exists(self):
         """ Do we have a user account for this user?
 
@@ -666,25 +680,53 @@ class User:
         # !!! should write to a temp file here to avoid race conditions,
         # or even better, use locking
 
-        data = codecs.open(self.__filename(), "w", config.charset)
-        data.write("# Data saved '%s' for id '%s'\n" % (
-            time.strftime(self._cfg.datetime_fmt, time.localtime(time.time())),
-            self.id))
-        attrs = self.persistent_items()
-        attrs.sort()
-        for key, value in attrs:
-            # Encode list values
-            if isinstance(value, list):
-                key += '[]'
-                value = encodeList(value)
-            # Encode dict values
-            elif isinstance(value, dict):
-                key += '{}'
-                value = encodeDict(value)
-            line = u"%s=%s" % (key, unicode(value))
-            line = line.replace('\n', ' ').replace('\r', ' ') # no lineseps
-            data.write(line + '\n')
-        data.close()
+        temp = tempfile.NamedTemporaryFile(dir=self._request.cfg.user_dir, 
+                                           delete=False)
+        try:
+            data = codecs.getwriter(config.charset)(temp)
+            data.write("# Data saved '%s' for id '%s'\n" % (
+                time.strftime(self._cfg.datetime_fmt,
+                              time.localtime(time.time())),
+                self.id))
+            attrs = self.persistent_items()
+            attrs.sort()
+            for key, value in attrs:
+                # Encode list values
+                if isinstance(value, list):
+                    key += '[]'
+                    value = encodeList(value)
+                # Encode dict values
+                elif isinstance(value, dict):
+                    key += '{}'
+                    value = encodeDict(value)
+                line = u"%s=%s" % (key, unicode(value))
+                line = line.replace('\n', ' ').replace('\r', ' ') # no lineseps
+                data.write(line + '\n')
+
+            # atomically put it in place (except on windows)
+            filesys.rename(temp.name, self.__filename())
+            # Ensure that both the user (typically httpsd/www-data)
+            # and the group (typically collab) can write to the file
+            filesys.chmod(self.__filename(), 
+                          stat.S_IRUSR|stat.S_IWUSR|stat.S_IRGRP|stat.S_IWGRP)
+        except IOError as err:
+            _ = self._request.getText
+            # throw a nicer exception
+            if err.errno == errno.ENOSPC:
+                raise SaveError(
+                    _("Cannot save user %s, no storage space left.") % 
+                    self.name)
+            else:
+                raise SaveError(
+                    _("An I/O error occurred while saving user %s (errno=%d)")\
+                        % (self.name, err.errno))
+        finally:
+            try:
+                os.remove(temp.name)
+            except:
+                pass # we don't care for errors in the os.remove
+            finally:
+                temp.close()
 
         arena = 'user'
         key = 'name2id'

--- ./MoinMoin/xmlrpc/__init__.py.orig	2010-10-26 10:58:35.000000000 +0300
+++ ./MoinMoin/xmlrpc/__init__.py	2010-10-26 10:59:59.000000000 +0300
@@ -39,6 +39,32 @@ from MoinMoin.action import AttachFile
 from MoinMoin import caching
 from MoinMoin import session
 
+def is_login_required(request):
+    login_required = True
+    env = request.env                      
+
+    from MoinMoin.auth.http import HTTPAuth
+    from MoinMoin.auth.sslclientcert import SSLClientCertAuth
+
+    # Get all the authentication methods used in the config
+    auth = getattr(request.cfg, 'auth', [])
+
+    for method in auth:
+        # If we're using HTTP auth, and the server has authenticated
+        # the user successfully, do not require another login
+        if isinstance(method, HTTPAuth):
+            if env.get('REMOTE_USER', ''):
+               login_required = False
+               break
+        # If we're using SSL client certificate auth, and the server
+        # has authenticated the user successfully, do not require
+        # another login
+        elif isinstance(method, SSLClientCertAuth):
+            if env.get('SSL_CLIENT_VERIFY', 'FAILURE') == 'SUCCESS':
+               login_required = False
+               break
+
+    return login_required
 
 class XmlRpcAuthTokenIDHandler(session.SessionIDHandler):
     def __init__(self, token=None):
@@ -135,7 +161,14 @@ class XmlRpcBase:
             else:
                 # overwrite any user there might be, if you need a valid user for
                 # xmlrpc, you have to use multicall and getAuthToken / applyAuthToken
-                self.request.user = user.User(self.request, auth_method='xmlrpc:invalid')
+                # FIXME: Only do this if there is no valid user
+                #        or if login to the wiki is required
+                login_required = is_login_required(self.request)
+                if (not self.request.user or
+                    not self.request.user.valid or
+                    login_required):
+                    self.request.user = user.User(self.request, 
+                                                  auth_method='xmlrpc:invalid')
 
                 data = self.request.read(self.request.content_length)
 
@@ -691,7 +724,13 @@ class XmlRpcBase:
         id_handler = XmlRpcAuthTokenIDHandler()
 
         u = self.request.cfg.session_handler.start(self.request, id_handler)
-        u = self.request.handle_auth(u, username=username,
-                                     password=password, login=True)
+        login_required = is_login_required(self.request)
+
+        if login_required:
+            u = self.request.handle_auth(u, username=username,
+                                         password=password, login=True)
+        else:
+            u = self.request.handle_auth(u, username=username,
+                                         password=password)
 
         self.request.cfg.session_handler.after_auth(self.request, id_handler, u)
